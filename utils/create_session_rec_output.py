"""
The script takes the recommendation result file generated by session_rec baselines and recombine
it with the recommendation test data that is used to run the baselines, and finally
generates a copy of the recommendation test data, appended with a new column containing the prediction items
for each test sample.
"""
import csv
import os
import json
from pathlib import Path
from dotenv import load_dotenv
import time
from datetime import datetime
import pickle
from utils.uploader import upload_submission
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('--upload', action='store_true')

args, _ = parser.parse_known_args()

# load envs from env file
load_dotenv(verbose=True, dotenv_path='./utils/upload.env.local')


# read envs from file
EMAIL = os.getenv('EMAIL', None)  # the e-mail you used to sign up
assert EMAIL is not None


TEST_PATH = Path('./dataset/raw/rec_test_phase_1.json')
TEST_WITH_PREDICTION_PATH = Path(
    './submission/' + '{}_{}.json'.format(
        EMAIL.replace('@', '_'), round(time.time() * 1000)))
RECOMMENDATION_PATH = Path(
    './results/gru4rec.csv')
ITEM_LABEL_ENCODING_MAP_PATH = Path(
    './dataset/prepared/item_label_encoding.p')

item_label_encoding = pickle.load(ITEM_LABEL_ENCODING_MAP_PATH.open(mode='rb'))

with TEST_PATH.open() as f:
    original_test_data = json.load(f)

for d in original_test_data:
    d['prediction'] = []

with RECOMMENDATION_PATH.open() as csvfile:
    reader = csv.DictReader(csvfile, delimiter=";")
    for row in reader:
        idx_in_test_data = int(row['SessionId'])
        recommendation_i = list(map(int, row['Recommendations'].split(',')))
        recommendation_s = [item_label_encoding[i] for i in recommendation_i]
        original_test_data[idx_in_test_data]['prediction'] = recommendation_s

# store the final output file
with TEST_WITH_PREDICTION_PATH.open('w') as outfile:
    json.dump(original_test_data, outfile, indent=2)

print("All done appending prediction to original recommendation test data!")

if args.upload:
    upload_submission(local_file=TEST_WITH_PREDICTION_PATH, task='rec')
# bye bye
print("\nAll done at {}: see you, space cowboy!".format(datetime.utcnow()))
